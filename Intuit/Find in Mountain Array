class Solution {
public:
    int findInMountainArray(int target, MountainArray &m) {
        
        //find the peak element index
        
        //to store the values so that we can reduce the calls
        vector<int> store(10000,-1);
        
        int len=m.length();
        int start=0,end=len-1,mid,left,right,val;
        while(start<=end)
        {
            mid=(start+end)/2;
            left=INT_MIN;
            right=INT_MAX;
            
            val=(store[mid]!=-1) ? store[mid] : store[mid]=m.get(mid); 
            
            
            if(mid>0)
            {
                //there exists a left element
                left=(store[mid-1]!=-1) ? store[mid-1] : store[mid-1]=m.get(mid-1);
            }
            
            if(mid<len-1)
            {
                //there exists a right element
                right=(store[mid+1]!=-1) ? store[mid+1] : store[mid+1]=m.get(mid+1);
            }
            
            //the peak element
            if(val>left && val>right)
                break;
            else if(left<val && val<right)
            {
                //increasing array
                //peak lies on the right side
                start=mid+1;
            }
            else if(left>val && val>right)
            {
                //decreasing array
                //peak lies on the left
                end=mid-1;
            }
            
        }
        
        //mid stores the peak index
        if(target==val)
            return mid;
        
        int startVal=m.get(0);
        int endVal=m.get(len-1);
        
        //perfom the search on left half and right half
        if(target==startVal)
            return 0;
        if(target>=startVal && target<=val)
        {
        
            //search to the left of peak index
            start=0;
            end=mid-1;
            int x;
            while(start<=end)
            {
                x=(start+end)/2;
				//make use if you have already stored the value
                int currVal=(store[x]!=-1) ? store[x] : m.get(x);
                if(currVal==target)
                    return x;
                else if(target < currVal)
                {
                    //lies on left side
                    end=x-1;
                }
                else if(target>currVal)
                {
                    //lies on right side
                    start=x+1;
                }
            }
        }
        
        //search on the right half
        if(target<=val && target>=endVal)
        {
            start=mid+1;
            end=len-1;
            int x;
            int currVal;
            while(start<=end)
            {
                x=(start+end)/2;
                currVal=(store[x]!=-1) ? store[x] : m.get(x);
                if(currVal==target)
                    return x;
                else if(target>currVal)
                {
                    //lies on left side
                    end=x-1;
                }
                else if(currVal>target)
                {
                    //lies on right side
                    start=x+1;
                }
            }
        }
        
        return -1;
    }
};
