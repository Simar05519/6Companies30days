#Question-13-Goldman Sachs

class Solution{
public:
    string decodedString(string s){
        stack<int> count;  
        stack<string> result; 
        int ind = 0;  
        string curr_str = "";   
        
        while(ind < s.length()) { 
            if(isdigit(s[ind])) {
                int num = 0;  
                while(isdigit(s[ind])) {
                    num = 10 * num + (s[ind] - '0');  
                    ind++;
                }
                count.push(num);
            }
            else if(s[ind] == '[') {
                result.push(curr_str); 
                curr_str= "";
                ind+= 1;  
            }
            else if(s[ind] == ']') {
                int n = count.top(); count.pop();   
                string res = result.top();result.pop();    
                for(int i = 0; i < n; ++i) {
                    res += curr_str;  
                }
                curr_str = res;  
                ind+= 1;  
            }else {
                curr_str += s[ind]; 
                ind+= 1;  
            }
        }
        
        return curr_str;  
    } 

};



#Question-14-Goldman Sachs

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
       int start = 0;
        int sum = 0;
        int minLength = INT_MAX;
        for (int end = 0; end < nums.size(); end++) 
        {
           sum = sum + nums[end];
           while (sum >= target && start <= end) {
              minLength = min(minLength, (end - start) + 1);
               sum = sum - nums[start++];
             }
          }
 
        return (minLength == INT_MAX) ? 0 : minLength; 
    }
};



#Question-15-Goldman Sachs

class Solution {
  public:
    bool canPair(vector<int> nums, int k) {
        // Code here.
        int n=nums.size();
        if(n%2!=0)
        return false;
        unordered_map<int,int>m;
        for(int i=0;i<n;i++)
        {
            m[nums[i]%k]++;
        }
        for(int i=0;i<n;i++)
        {
            int rem1=nums[i]%k;
            if(rem1==0)
            {
                if(m[rem1] % 2 != 0) return false;
            }
            else
            {
                int rem2 = k - rem1;
                if(rem1 == rem2 and m[rem1] % 2 != 0) return false;
                if(m.find(rem2) == m.end()) return false;
                if(m[rem1] != m[rem2]) return false;
            }
            
        }
        return true;
    }
};
